.wrapper-title{
    text-align: center;
}
.wrapper-content{
    padding-top: 10em;
    padding-bottom: 18em;
    color: white;
}
.box {
    padding: 2rem;
    max-width: 14rem;
    background-color: #ffffff;
  }
  
  .box--wide {
    max-width: 50rem;
  }
  
  * {
    margin: 0;
    padding: 0;
  }
  
  * + * {
    margin-top: 2rem;
  }
  
  /* The good stuff: */
  
  :root {
    /* The intrinsic width of the underline stroke (in pixels). This is 
     * the same as the height of the cap images. Don't specify the
     * units! This is because of some of the calculations we do later on. */
    --underline-intrinsic-width: 8;
    
    /* The actual width of the underline stroke we want to render (in pixels).
     * You can modify this, and the sizing and positioning should be calculated
     * accordingly. Again, Don't specify the units! */
    --underline-width: 12;
    
    /* The colour used to draw the underline. It should match the colour
     * used in the cap images... unfortunately we can't modify the SVG
     * fill via CSS because it's a background image. */
    --underline-color: #ffe600;
    
    /* We need to know the width of the cap images so that we
     * can position everything on the x axis accordingly. */
    --underline-cap-width: 4px;
    
    /* The border is positioned relative to the bottom of the line.
     * We can move it upwards a little to create an overlap effect. */
    --underline-offset-y: -2px;
    
    /* The padding to add to the x axis. By default, the caps would be
     * aligned with the beginning and end of the line. */
    --underline-padding-x: 0.12em;
    
    /* The cap images to use that form the left and right rounded
     * shape. I guess these could be any shape, they don't
     * necessarily have to be round üôÇ.
     */
    --cap-image-left: url(https://files-d4s40otz1.now.sh/left.svg);
    --cap-image-right: url(https://files-4vvqilj8v.now.sh/right.svg);
  }
.content-title{
  display: inline;
  --underline-width-scale: calc(var(--underline-width) / var(--underline-intrinsic-width));
  padding: 0 calc(var(--underline-padding-x) + calc(var(--underline-cap-width) * var(--underline-width-scale)));
  box-decoration-break: clone;
  background-repeat: no-repeat;
  background-image:
    linear-gradient(180deg, var(--underline-color), var(--underline-color)),
    var(--cap-image-left),
    var(--cap-image-right);
  background-position-x:
    calc(var(--underline-cap-width) * var(--underline-width-scale)),
    0,
    100%;
  background-position-y: calc(100% - var(--underline-offset-y) * -1);
  background-size:
    calc(100% - calc(var(--underline-cap-width) * var(--underline-width-scale) * 2)) calc(var(--underline-width) * 1px),
    auto calc(var(--underline-width) * 1px),
    auto calc(var(--underline-width) * 1px);
}
/* center the blockquote in the page */
.blockquote-wrapper {
    display: flex;
    height: 100vh;
    padding: 0 20px;
 }
 
 /* Blockquote main style */
 .blockquote {
     position: relative;
     font-family: 'Montserrat', sans-serif;
     font-weight: 800;
     color: #ffffff;
     padding: 30px 0;
     width: 100%;
     max-width: 500px;
     z-index: 1;
     margin: 80px auto;
     align-self: center;
     border-top: solid 1px;
     border-bottom: solid 1px;
 }
 
 /* Blockquote header */
 .blockquote h1 {
     position: relative;
     color: #FFFFFF;
     font-size: 40px;
     font-weight: 800;
     line-height: 1;
     margin: 0;
 }
 
 /* Blockquote right double quotes */
 .blockquote:after {
     position: absolute;
     content: "‚Äù";
     color: rgba(255, 255, 255, 1);
     font-size: 10rem;
     line-height: 0;
     bottom: -43px;
     right: 30px;
 }
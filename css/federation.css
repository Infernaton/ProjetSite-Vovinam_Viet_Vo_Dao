img.alignRight{
    float: right;
    margin: 130px 12px 25px 0;
    padding: 15px;
}


p.alignLeft{
    text-align: left;
    text-align: justify;
    
}
p.alignRight{
    text-align: right;
    text-align: justify;
}
a{  
    color: black;
    text-decoration: none;
    outline: none;
}
.link{
    color:#6565a7;
}
a:hover{
    color: #DC3634;
}

.hide{
    display: none;
}

:root {
    /* The intrinsic width of the underline stroke (in pixels). This is 
     * the same as the height of the cap images. Don't specify the
     * units! This is because of some of the calculations we do later on. */
    --underline-intrinsic-width: 8;
    
    /* The actual width of the underline stroke we want to render (in pixels).
     * You can modify this, and the sizing and positioning should be calculated
     * accordingly. Again, Don't specify the units! */
    --underline-width: 12;
    
    /* The colour used to draw the underline. It should match the colour
     * used in the cap images... unfortunately we can't modify the SVG
     * fill via CSS because it's a background image. */
    --underline-color-red: #e82226;
    --underline-color-blue: #1c55a3;
    --underline-color-yellow: #ffe600;
    
    /* We need to know the width of the cap images so that we
     * can position everything on the x axis accordingly. */
    --underline-cap-width: 4px;
    
    /* The border is positioned relative to the bottom of the line.
     * We can move it upwards a little to create an overlap effect. */
    --underline-offset-y: -2px;
    
    /* The padding to add to the x axis. By default, the caps would be
     * aligned with the beginning and end of the line. */
    --underline-padding-x: 0.12em;
    
    /* The cap images to use that form the left and right rounded
     * shape. I guess these could be any shape, they don't
     * necessarily have to be round ðŸ™‚.
     */
    --cap-image-left-red: url("../assets/svg/red_left.svg");
    --cap-image-right-red: url("../assets/svg/red_right.svg");
    --cap-image-left-blue: url("../assets/svg/blue_left.svg");
    --cap-image-right-blue: url("../assets/svg/blue_right.svg");
    --cap-image-left-yellow: url("../assets/svg/yellow_left.svg");
    --cap-image-right-yellow: url("../assets/svg/yellow_right.svg");
  }
.content-title-red{
  display: inline;
  --underline-width-scale: calc(var(--underline-width) / var(--underline-intrinsic-width));
  padding: 0px calc(var(--underline-padding-x) + calc(var(--underline-cap-width) * var(--underline-width-scale)));
  box-decoration-break: clone;
  background-repeat: no-repeat;
  background-image:
    linear-gradient(180deg, var(--underline-color-red), var(--underline-color-red)),
    var(--cap-image-left-red),
    var(--cap-image-right-red);
  background-position-x:
    calc(var(--underline-cap-width) * var(--underline-width-scale)),
    0,
    100%;
  background-position-y: calc(100% - var(--underline-offset-y) * -1);
  background-size:
    calc(100% - calc(var(--underline-cap-width) * var(--underline-width-scale) * 2)) calc(var(--underline-width) * 1px),
    auto calc(var(--underline-width) * 1px),
    auto calc(var(--underline-width) * 1px);
}
.content-title-blue{
  display: inline;
  --underline-width-scale: calc(var(--underline-width) / var(--underline-intrinsic-width));
  padding: 0px calc(var(--underline-padding-x) + calc(var(--underline-cap-width) * var(--underline-width-scale)));
  box-decoration-break: clone;
  background-repeat: no-repeat;
  background-image:
    linear-gradient(180deg, var(--underline-color-blue), var(--underline-color-blue)),
    var(--cap-image-left-blue),
    var(--cap-image-right-blue);
  background-position-x:
    calc(var(--underline-cap-width) * var(--underline-width-scale)),
    0,
    100%;
  background-position-y: calc(100% - var(--underline-offset-y) * -1);
  background-size:
    calc(100% - calc(var(--underline-cap-width) * var(--underline-width-scale) * 2)) calc(var(--underline-width) * 1px),
    auto calc(var(--underline-width) * 1px),
    auto calc(var(--underline-width) * 1px);
}
.content-title-yellow{
  display: inline;
  --underline-width-scale: calc(var(--underline-width) / var(--underline-intrinsic-width));
  padding: 0px calc(var(--underline-padding-x) + calc(var(--underline-cap-width) * var(--underline-width-scale)));
  box-decoration-break: clone;
  background-repeat: no-repeat;
  background-image:
    linear-gradient(180deg, var(--underline-color-yellow), var(--underline-color-yellow)),
    var(--cap-image-left-yellow),
    var(--cap-image-right-yellow);
  background-position-x:
    calc(var(--underline-cap-width) * var(--underline-width-scale)),
    0,
    100%;
  background-position-y: calc(100% - var(--underline-offset-y) * -1);
  background-size:
    calc(100% - calc(var(--underline-cap-width) * var(--underline-width-scale) * 2)) calc(var(--underline-width) * 1px),
    auto calc(var(--underline-width) * 1px),
    auto calc(var(--underline-width) * 1px);
}
/**
* Set rules for how the map overlays
* (information box and legend) will be displayed
* on the page. */
.map-overlay {
    position: absolute;
    bottom: 0;
    right: 0;
    background: rgba(255, 255, 255, 0.8);
    margin-right: 20px;
    font-family: Arial, sans-serif;
    overflow: auto;
    border-radius: 3px;
  }
  #features {
    top: 0;
    height: 130px;
    margin-top: 20px;
    width: 200px;
  }

  #legend {
    padding: 10px;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    line-height: 18px;
    height: 70px;
    margin-bottom: 40px;
    width: 100px;
  }
  
  .legend-key {
    display: inline-block;
    border-radius: 20%;
    width: 10px;
    height: 10px;
    margin-right: 5px;
  }
  .titre{
    display: inline;
    --underline-width-scale: calc(var(--underline-width) / var(--underline-intrinsic-width));
    padding: 0px calc(var(--underline-padding-x) + calc(var(--underline-cap-width) * var(--underline-width-scale)));
    box-decoration-break: clone;
    background-repeat: no-repeat;
    background-image: linear-gradient(
180deg
, var(--underline-color), var(--underline-color)), var(--cap-image-left), var(--cap-image-right);
    background-position-x: calc(var(--underline-cap-width) * var(--underline-width-scale)), 0, 100%;
    background-position-y: calc(100% - var(--underline-offset-y) * -1);
    background-size: calc(100% - calc(var(--underline-cap-width) * var(--underline-width-scale) * 2)) calc(var(--underline-width) * 1px), auto calc(var(--underline-width) * 1px), auto calc(var(--underline-width) * 1px);
}
